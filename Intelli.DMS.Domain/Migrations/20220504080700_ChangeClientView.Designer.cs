// <auto-generated />
using System;
using Intelli.DMS.Domain.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Intelli.DMS.Domain.Migrations
{
    [DbContext(typeof(DMSContext))]
    [Migration("20220504080700_ChangeClientView")]
    partial class ChangeClientView
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Intelli.DMS.Domain.Model.AdvancedLogging", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("ActionCompletion")
                        .HasColumnType("bit");

                    b.Property<string>("Browser")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Controller")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Device")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ExitDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Ip")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("IP");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("ParentID");

                    b.Property<string>("RequestId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RequestPayload")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RequestTime")
                        .HasColumnType("datetime");

                    b.Property<string>("RequestUrl")
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)")
                        .HasColumnName("RequestURL");

                    b.Property<string>("ResponceError")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponcePayload")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponceStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ResponceTime")
                        .HasColumnType("datetime");

                    b.Property<string>("System")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("AdvancedLogging");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.AdvancedSignatureCallHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CallBodyInput")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("SigningSucceeded")
                        .HasColumnType("bit");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CompanyId" }, "IX_AdvancedSignatureCallHistory_CompanyId");

                    b.ToTable("AdvancedSignatureCallHistory");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.Alert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Msg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SystemUserId")
                        .HasColumnType("int");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Alerts");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SystemUserId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "UserName" }, "IX_AspNetUsers")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "IX_AspNetUsers_1")
                        .IsUnique()
                        .HasFilter("([Email] IS NOT NULL)");

                    b.HasIndex(new[] { "SystemUserId" }, "IX_AspNetUsers_SystemUserId");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AuditDateTimeUtc")
                        .HasColumnType("bigint");

                    b.Property<string>("AuditType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("AuditUser")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ChangedColumns")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(1)))");

                    b.Property<string>("KeyValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Audits");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.Batch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("AppliedGdpr")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("AppliedGDPR")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("BatchSourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("BatchStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("BusinessUnitId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("CurrentOtp")
                        .HasColumnType("int")
                        .HasColumnName("CurrentOTP");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<Guid?>("InternalRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LockedBy")
                        .HasColumnType("int");

                    b.Property<string>("LockedByNavigationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MandatoryAlerts")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OtpvalidUntil")
                        .HasColumnType("datetime")
                        .HasColumnName("OTPValidUntil");

                    b.Property<DateTime?>("PublishedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("RecognizedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RequestId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("RetriesCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("StartProcessDate")
                        .HasColumnType("datetime");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("ValidationAlerts")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerifiedEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("VerifiedStartDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex(new[] { "BatchSourceId" }, "IX_Batches_BatchSourceId");

                    b.HasIndex(new[] { "BatchStatusId" }, "IX_Batches_BatchStatusId");

                    b.HasIndex(new[] { "BusinessUnitId" }, "IX_Batches_BusinessUnitId");

                    b.HasIndex(new[] { "LockedByNavigationId" }, "IX_Batches_LockedByNavigationId");

                    b.ToTable("Batches");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.BatchItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BatchId")
                        .HasColumnType("int");

                    b.Property<string>("BatchItemReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BatchItemStatusId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<int?>("DocumentClassId")
                        .HasColumnType("int");

                    b.Property<int>("DocumentVersionId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OccuredAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int?>("SystemRoleId")
                        .HasColumnType("int");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DocumentVersionId");

                    b.HasIndex("SystemRoleId");

                    b.HasIndex(new[] { "BatchId" }, "IX_BatchItems_BatchId");

                    b.HasIndex(new[] { "BatchItemStatusId" }, "IX_BatchItems_BatchItemStatusId");

                    b.HasIndex(new[] { "DocumentClassId" }, "IX_BatchItems_DocumentClassId");

                    b.HasIndex(new[] { "ParentId" }, "IX_BatchItems_ParentId");

                    b.ToTable("BatchItems");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.BatchItemField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BatchItemId")
                        .HasColumnType("int");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<int?>("DictionaryValueId")
                        .HasColumnType("int");

                    b.Property<int?>("DictionaryValueIdOld")
                        .HasColumnType("int")
                        .HasColumnName("DictionaryValueId_old");

                    b.Property<int>("DocumentClassFieldId")
                        .HasColumnType("int");

                    b.Property<int>("DocumentVersionId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsLast")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsUpdated")
                        .HasColumnType("bit");

                    b.Property<string>("RegisteredFieldValue")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("RegisteredFieldValueOld")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("RegisteredFieldValue_old");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DocumentVersionId");

                    b.HasIndex(new[] { "BatchItemId" }, "IX_BatchItemFields_BatchItemId");

                    b.HasIndex(new[] { "DictionaryValueId" }, "IX_BatchItemFields_DictionaryValueId");

                    b.HasIndex(new[] { "DocumentClassFieldId" }, "IX_BatchItemFields_DocumentClassFieldId");

                    b.ToTable("BatchItemFields");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.BatchItemPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BatchItemId")
                        .HasColumnType("int");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<int>("DocumentVersionId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("OriginalName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DocumentVersionId");

                    b.HasIndex(new[] { "BatchItemId" }, "IX_BatchItemPages_BatchItemId");

                    b.HasIndex(new[] { "FileName", "BatchItemId" }, "UX_BatchItemPages_FileName")
                        .IsUnique();

                    b.ToTable("BatchItemPages");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.BatchItemStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BatchItemStatusName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("BatchItemStatus");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("EnumValue")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("BatchItemStatuses");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.BatchMetaHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BatchId")
                        .HasColumnType("int");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("CurrentValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OccuredAt")
                        .HasColumnType("datetime");

                    b.Property<string>("PreviousValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SystemUserId")
                        .HasColumnType("int");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SystemUserId");

                    b.HasIndex(new[] { "BatchId" }, "IX_BatchMetaHistory_BatchId");

                    b.ToTable("BatchMetaHistory");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.BatchMetum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BatchId")
                        .HasColumnType("int");

                    b.Property<string>("BatchItemReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<int?>("DictionaryValueId")
                        .HasColumnType("int");

                    b.Property<int>("DocumentClassFieldId")
                        .HasColumnType("int");

                    b.Property<int>("DocumentVersionId")
                        .HasColumnType("int");

                    b.Property<string>("FieldValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DocumentVersionId");

                    b.HasIndex(new[] { "BatchId" }, "IX_BatchMeta_BatchId");

                    b.HasIndex(new[] { "DictionaryValueId" }, "IX_BatchMeta_DictionaryValueId");

                    b.HasIndex(new[] { "DocumentClassFieldId" }, "IX_BatchMeta_DocumentClassFieldId");

                    b.ToTable("BatchMeta");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.BatchSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BatchSourceCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("BatchSourceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("BatchSource");

                    b.Property<string>("Comments")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("EnumValue")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("BatchSources");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.BatchSourceDocumentsSpecification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BatchSourceId")
                        .HasColumnType("int");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("DocumentClassId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVirtual")
                        .HasColumnType("bit");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BatchSourceId" }, "IX_BatchSourceDocumentsSpecifications_BatchSourceId");

                    b.HasIndex(new[] { "DocumentClassId" }, "IX_BatchSourceDocumentsSpecifications_DocumentClassId");

                    b.ToTable("BatchSourceDocumentsSpecifications");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.BatchStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BatchStatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("BatchStatus");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EnumValue")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("BatchStatuses");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.BopConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("EnumValue")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Setting")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("BopConfigs");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.BopDictionary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("((1))");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DictionaryTypeId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DictionaryTypeId", "Value" }, "IX_Dictionaries")
                        .IsUnique();

                    b.ToTable("BopDictionaries");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.Bu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("BUs");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.CatalogNameProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Product")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("CatalogNameProducts");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Afm")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("AFM");

                    b.Property<string>("Cdi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CDI");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<int?>("ExternelId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("GdprdaysToBeKept")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNotValidForTransaction")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Reason")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex(new[] { "Afm" }, "IX_Customer_AFM")
                        .IsUnique();

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.ClientTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClienTag");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.ClientView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Afm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cdi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<int?>("ExternelId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GdprdaysToBeKept")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNotValidForTransaction")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ClientView", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.ColumnPreference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColumnName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ScreenId")
                        .HasColumnType("int");

                    b.Property<int>("SystemUserId")
                        .HasColumnType("int");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ScreenId" }, "IX_ColumnPreferences_ScreenId");

                    b.HasIndex(new[] { "SystemUserId" }, "IX_ColumnPreferences_SystemUserId");

                    b.ToTable("ColumnPreferences");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AgentController")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CallBackUrl")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("CallBackURL");

                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<int?>("CustomerRetries")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("Enabled")
                        .HasColumnType("bit");

                    b.Property<bool?>("FtpActive")
                        .HasColumnType("bit");

                    b.Property<string>("FtpDirectory")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FtpHostName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FtpPassword")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("FtpPort")
                        .HasColumnType("int");

                    b.Property<bool?>("FtpResponseActive")
                        .HasColumnType("bit");

                    b.Property<string>("FtpResponseDirectory")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FtpResponseHostName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FtpResponsePassword")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("FtpResponsePort")
                        .HasColumnType("int");

                    b.Property<string>("FtpResponseUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("FtpResponseUserSecureProtocol")
                        .HasColumnType("bit");

                    b.Property<string>("FtpUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("FtpUserSecureProtocol")
                        .HasColumnType("bit");

                    b.Property<int>("GdprdaysToBeKept")
                        .HasColumnType("int")
                        .HasColumnName("GDPRDaysToBeKept");

                    b.Property<string>("HawkAppId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("HawkAppID");

                    b.Property<string>("HawkSecret")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HawkUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSignedCompany")
                        .HasColumnType("bit");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaxCallTime")
                        .HasColumnType("int")
                        .HasColumnName("MaxCallTIme");

                    b.Property<bool?>("ResponseWithFtp")
                        .HasColumnType("bit");

                    b.Property<int>("RetriesWhenFailPublished")
                        .HasColumnType("int");

                    b.Property<bool>("SendLink")
                        .HasColumnType("bit");

                    b.Property<bool?>("SendRejectionReasonAsCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("SimilarityThreshold")
                        .HasColumnType("int");

                    b.Property<int?>("SlabatchQuantity")
                        .HasColumnType("int")
                        .HasColumnName("SLABatchQuantity");

                    b.Property<int>("Slaimportance")
                        .HasColumnType("int")
                        .HasColumnName("SLAImportance");

                    b.Property<int?>("Slaminutes")
                        .HasColumnType("int")
                        .HasColumnName("SLAMinutes");

                    b.Property<string>("Smsprovider")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SMSProvider");

                    b.Property<bool>("SupportsCalls")
                        .HasColumnType("bit");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.Property<int>("UsersPerCompany")
                        .HasColumnType("int");

                    b.Property<string>("VideoCallBackUrl")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.CompanyAbbyTemplate", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<int>("DocumentClassId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentClassID");

                    b.HasIndex(new[] { "CompanyId" }, "IX_CompanyAbbyTemplates_CompanyID");

                    b.HasIndex(new[] { "DocumentClassId" }, "IX_CompanyAbbyTemplates_DocumentClassID");

                    b.ToTable("CompanyAbbyTemplates");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.CompanyAbbyTemplateField", b =>
                {
                    b.Property<int?>("CompanyFlowId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<int>("DocumentClassFieldId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentClassFieldID");

                    b.HasIndex(new[] { "CompanyFlowId" }, "IX_CompanyAbbyTemplateFields_CompanyFlowId");

                    b.ToTable("CompanyAbbyTemplateFields");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.CompanyFlow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("FlowName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("CompanyFlows");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.CompanySigningDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("CompanySigningDocuments");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.Configuration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<int>("ForcePasswordChangeDays")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("PasswordRequireDigit")
                        .HasColumnType("bit");

                    b.Property<bool>("PasswordRequireLowercase")
                        .HasColumnType("bit");

                    b.Property<bool>("PasswordRequireNonAlphanumeric")
                        .HasColumnType("bit");

                    b.Property<bool>("PasswordRequireUppercase")
                        .HasColumnType("bit");

                    b.Property<int>("PasswordRequiredLength")
                        .HasColumnType("int");

                    b.Property<int>("RestrictLastUsedPasswords")
                        .HasColumnType("int");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Configurations");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code2D")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Code3D")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MobileCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.DashboardMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("ViewName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("DashboardMenu");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.DictionaryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("(CONVERT([bigint],(0)))");

                    b.Property<string>("DictionaryTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("DictionaryType");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("(CONVERT([bigint],(0)))");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DictionaryTypeName" }, "IX_DictionaryTypes")
                        .IsUnique();

                    b.ToTable("DictionaryTypes");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.DocumentApprovalHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<string>("Approvedby")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BatchItemReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("DocumentApprovalHistory");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.DocumentCheckOutView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("DocumentState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VersionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DocumentCheckOutView", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.DocumentClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<long>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("(CONVERT([bigint],(0)))");

                    b.Property<string>("DocumentClassName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("EnumValue")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<short?>("GroupMandatoryDocument")
                        .HasColumnType("smallint");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("RecognitionMappedName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("(CONVERT([bigint],(0)))");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DocumentTypeId" }, "IX_DocumentClasses_DocumentTypeId");

                    b.ToTable("DocumentClasses");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.DocumentClassField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("(CONVERT([bigint],(0)))");

                    b.Property<int?>("DictionaryTypeId")
                        .HasColumnType("int");

                    b.Property<int>("DocumentClassFieldTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("DocumentClassId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMandatory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("MaxLength")
                        .HasColumnType("int");

                    b.Property<int?>("MinLength")
                        .HasColumnType("int");

                    b.Property<int?>("UISort")
                        .HasColumnType("int");

                    b.Property<string>("Uilabel")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("UILabel")
                        .HasDefaultValueSql("('')");

                    b.Property<long>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("(CONVERT([bigint],(0)))");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DictionaryTypeId" }, "IX_DocumentClassFields_DictionaryTypeId");

                    b.HasIndex(new[] { "DocumentClassFieldTypeId" }, "IX_DocumentClassFields_DocumentClassFieldTypeId");

                    b.HasIndex(new[] { "DocumentClassId" }, "IX_DocumentClassFields_DocumentClassId");

                    b.ToTable("DocumentClassFields");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.DocumentClassFieldType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("(CONVERT([bigint],(0)))");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("(CONVERT([bigint],(0)))");

                    b.HasKey("Id");

                    b.ToTable("DocumentClassFieldTypes");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.DocumentRejectionReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Descr")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("DocumentRejectionReasons");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.DocumentRejectionReasonCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<int>("DocumentRejectionReasonId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CompanyId" }, "IX_DocumentRejectionReasonCompany_CompanyId");

                    b.HasIndex(new[] { "DocumentRejectionReasonId" }, "IX_DocumentRejectionReasonCompany_DocumentRejectionReasonId");

                    b.ToTable("DocumentRejectionReasonCompany");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("DocumentTypeCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DocumentTypeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("DocumentTypes");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.DocumentTypeRoles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("SystemRoleId")
                        .HasColumnType("int");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("SystemRoleId");

                    b.ToTable("DocumentTypeRoles");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.DocumentVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DocumentVersion");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.DocumentsCheckedOut", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BatchItemId")
                        .HasColumnType("int");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("SystemUserId")
                        .HasColumnType("int");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BatchItemId");

                    b.HasIndex("SystemUserId");

                    b.ToTable("DocumentsCheckedOut");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.DocumentsCheckedOutLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BatchItemId")
                        .HasColumnType("int");

                    b.Property<long>("CheckedInAt")
                        .HasColumnType("bigint");

                    b.Property<long>("CheckedOutAt")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("SystemUserId")
                        .HasColumnType("int");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BatchItemId");

                    b.HasIndex("SystemUserId");

                    b.ToTable("DocumentsCheckedOutLogs");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.DocumentsPerCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<int>("DocumentClassId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CompanyId" }, "IX_DocumentsPerCompanies_CompanyId");

                    b.HasIndex(new[] { "DocumentClassId" }, "IX_DocumentsPerCompanies_DocumentClassId");

                    b.ToTable("DocumentsPerCompanies");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.License", b =>
                {
                    b.Property<string>("Comments")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LicenseName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("License");

                    b.ToTable("Licenses");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.LivenessToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("En")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("NumberResult")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("LivenessTokens");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.Nlog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClassName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Exception")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("LoggedOn")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PosId")
                        .HasColumnType("int");

                    b.Property<string>("Stacktrace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("NLog");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.Ocrengine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("OCREngines");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.OcrenginesDocumentClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<int>("DocumentClassId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("OcrengineDocumentClassCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("OCREngineDocumentClassCode");

                    b.Property<int>("OcrengineId")
                        .HasColumnType("int")
                        .HasColumnName("OCREngineId");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DocumentClassId" }, "IX_OCREnginesDocumentClasses_DocumentClassId");

                    b.HasIndex(new[] { "OcrengineId" }, "IX_OCREnginesDocumentClasses_OCREngineId");

                    b.ToTable("OCREnginesDocumentClasses");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.PasswordHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ChangedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SystemUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SystemUserId" }, "IX_PasswordHistory_SystemUserId");

                    b.ToTable("PasswordHistory");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.ProgrammeList", b =>
                {
                    b.Property<string>("AgreedPower")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Agreed_Power");

                    b.Property<string>("DayCharge")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Day_Charge");

                    b.Property<string>("HronProgrammeApplicationForm")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Hron_Programme_ApplicationForm");

                    b.Property<string>("NightCharge")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Night_Charge");

                    b.ToTable("Programme_List");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.RoleScreen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Privilege")
                        .HasColumnType("int");

                    b.Property<int>("ScreenId")
                        .HasColumnType("int");

                    b.Property<int>("SystemRoleId")
                        .HasColumnType("int");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ScreenId" }, "IX_RoleScreens_ScreenId");

                    b.HasIndex(new[] { "SystemRoleId" }, "IX_RoleScreens_SystemRoleId");

                    b.ToTable("RoleScreens");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.RoleScreenColumn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("ScreenColumnId")
                        .HasColumnType("int");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_RoleScreenColumns_RoleId");

                    b.HasIndex(new[] { "ScreenColumnId" }, "IX_RoleScreenColumns_ScreenColumnId");

                    b.ToTable("RoleScreenColumns");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.RoleScreenElement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Privilege")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("ScreenElementId")
                        .HasColumnType("int");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_RoleScreenElements_RoleId");

                    b.HasIndex(new[] { "ScreenElementId" }, "IX_RoleScreenElements_ScreenElementId");

                    b.ToTable("RoleScreenElements");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.RulesXref", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<int>("DocClassFieldId")
                        .HasColumnType("int")
                        .HasColumnName("DocClassFieldID");

                    b.Property<string>("Formula")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte>("RuleType")
                        .HasColumnType("tinyint");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.Property<int?>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Rules_xref");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.Screen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ScreenName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Screens");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.ScreenColumn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColumnName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<int>("DefaultOrder")
                        .HasColumnType("int");

                    b.Property<bool>("DefaultVisibility")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ScreenId")
                        .HasColumnType("int");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ScreenId" }, "IX_ScreenColumns_ScreenId");

                    b.ToTable("ScreenColumns");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.ScreenElement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ScreenElementName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ScreenId")
                        .HasColumnType("int");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ScreenId" }, "IX_ScreenElements_ScreenId");

                    b.ToTable("ScreenElements");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.ServiceLastExcecution", b =>
                {
                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime");

                    b.ToTable("ServiceLastExcecution");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.Station", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ComputerName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<bool?>("Enabled")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Stations");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.StationVariable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("StationId")
                        .HasColumnType("int");

                    b.Property<int>("StationVariableTypeId")
                        .HasColumnType("int");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("VariableValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "StationId", "StationVariableTypeId" }, "IX_StationVariables")
                        .IsUnique()
                        .HasFilter("([StationId] IS NOT NULL)");

                    b.HasIndex(new[] { "StationVariableTypeId" }, "IX_StationVariables_StationVariableTypeId");

                    b.ToTable("StationVariables");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.StationVariableType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("EnumValue")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("StationVariableTypeName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("StationVariableType");

                    b.Property<bool?>("SupportsGlobal")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("StationVariableTypes");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.StoredProceduresOutput.ApplyGDPR", b =>
                {
                    b.Property<string>("ServiceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Time")
                        .HasColumnType("datetime2");

                    b.ToTable("ApplyGDPR");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.StoredProceduresOutput.BatchesCount", b =>
                {
                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("CreatedDate")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("BatchesCount");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.SystemRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CompanyId" }, "IX_SystemRoles_CompanyId");

                    b.HasIndex(new[] { "Name", "CompanyId" }, "UC_SystemRoles_Name")
                        .IsUnique();

                    b.ToTable("SystemRoles");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.SystemUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FullName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Jmbg")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Email" }, "UC_SystemUsers_Email")
                        .IsUnique()
                        .HasFilter("([Email] IS NOT NULL)");

                    b.ToTable("SystemUsers");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.SystemUserCountry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("SystemUserId")
                        .HasColumnType("int");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CountryId" }, "IX_SystemUserCountries_CountryId");

                    b.HasIndex(new[] { "SystemUserId" }, "IX_SystemUserCountries_SystemUserId");

                    b.ToTable("SystemUserCountries");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.SystemUserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("SystemRoleId")
                        .HasColumnType("int");

                    b.Property<int>("SystemUserId")
                        .HasColumnType("int");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SystemRoleId" }, "IX_SystemUserRoles_SystemRoleId");

                    b.HasIndex(new[] { "SystemUserId" }, "IX_SystemUserRoles_SystemUserId");

                    b.ToTable("SystemUserRole");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.TblMissingTemplateField", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<int>("DocumentClassFieldId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentClassFieldID");

                    b.ToTable("tblMissingTemplateFields");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.TempBatchPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BatchId")
                        .HasColumnType("int");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("KeyFileName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("TempBatchPages");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.UserCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("SystemUserId")
                        .HasColumnType("int");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CompanyId" }, "IX_UserCompanies_CompanyId");

                    b.HasIndex(new[] { "SystemUserId" }, "IX_UserCompanies_SystemUserId");

                    b.ToTable("UserCompanies");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.UserPreference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<int>("GridPageSize")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int>("SystemUserId")
                        .HasColumnType("int");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SystemUserId" }, "IX_UserPreferences_SystemUserId");

                    b.ToTable("UserPreferences");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.UserSession", b =>
                {
                    b.Property<int>("SystemUserId")
                        .HasColumnType("int");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SystemUserId");

                    b.HasIndex(new[] { "SystemUserId" }, "IX_UserSessions_SystemUserId");

                    b.ToTable("UserSessions");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.Views.ClientRepositoryView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AppliedGDPR")
                        .HasColumnType("bit");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("ClientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("RepositoryName")
                        .HasColumnType("int");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ClientRepositoryView", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.Views.ClientsDataToBeDeleted", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("AppliedGdpr")
                        .HasColumnType("bit");

                    b.Property<int>("BatchSourceId")
                        .HasColumnType("int");

                    b.Property<int>("BatchStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("BusinessUnitId")
                        .HasColumnType("int");

                    b.Property<int?>("Cid")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CurrentOtp")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<Guid?>("InternalRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LockedBy")
                        .HasColumnType("int");

                    b.Property<string>("LockedByNavigationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MandatoryAlerts")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OtpvalidUntil")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PublishedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RecognizedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RetriesCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartProcessDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("ValidationAlerts")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerifiedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("VerifiedStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ClientsDataToBeDeleted", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.Views.DocumentReviewView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BatchId")
                        .HasColumnType("int");

                    b.Property<string>("CheckedOutBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<int>("CurrentReviewRole")
                        .HasColumnType("int");

                    b.Property<string>("DocumentClassName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCheckedOut")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("DocumentReviewView", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.Views.DocumentSearchView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CheckedOutBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedOn")
                        .HasColumnType("bigint");

                    b.Property<string>("DocumentClassName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentMetaData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FileStatus")
                        .HasColumnType("int");

                    b.Property<int>("FileVersion")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCheckedOut")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("LastModifiedOn")
                        .HasColumnType("bigint");

                    b.Property<int>("RepositoryName")
                        .HasColumnType("int");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("DocumentSearchView", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.Views.SystemUserView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("SystemUsersView", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.Views.BatchesDataTobeDeleted", b =>
                {
                    b.HasBaseType("Intelli.DMS.Domain.Model.Views.ClientsDataToBeDeleted");

                    b.ToTable("BatchesDataTobeDeleted", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.AdvancedSignatureCallHistory", b =>
                {
                    b.HasOne("Intelli.DMS.Domain.Model.Company", "Company")
                        .WithMany("AdvancedSignatureCallHistories")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.AspNetUser", b =>
                {
                    b.HasOne("Intelli.DMS.Domain.Model.SystemUser", "SystemUser")
                        .WithMany("AspNetUsers")
                        .HasForeignKey("SystemUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SystemUser");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.Batch", b =>
                {
                    b.HasOne("Intelli.DMS.Domain.Model.BatchSource", "BatchSource")
                        .WithMany("Batches")
                        .HasForeignKey("BatchSourceId")
                        .HasConstraintName("FK_Batches_BatchSources")
                        .IsRequired();

                    b.HasOne("Intelli.DMS.Domain.Model.BatchStatus", "BatchStatus")
                        .WithMany("Batches")
                        .HasForeignKey("BatchStatusId")
                        .HasConstraintName("FK_Batches_BatchStatuses1")
                        .IsRequired();

                    b.HasOne("Intelli.DMS.Domain.Model.Bu", "BusinessUnit")
                        .WithMany("Batches")
                        .HasForeignKey("BusinessUnitId")
                        .HasConstraintName("FK_Batches_BUs");

                    b.HasOne("Intelli.DMS.Domain.Model.Company", "Company")
                        .WithMany("Batches")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Intelli.DMS.Domain.Model.Client", "Customer")
                        .WithMany("Batches")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Batches_Customers");

                    b.Navigation("BatchSource");

                    b.Navigation("BatchStatus");

                    b.Navigation("BusinessUnit");

                    b.Navigation("Company");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.BatchItem", b =>
                {
                    b.HasOne("Intelli.DMS.Domain.Model.Batch", "Batch")
                        .WithMany("BatchItems")
                        .HasForeignKey("BatchId")
                        .HasConstraintName("FK_BatchItems_Batches")
                        .IsRequired();

                    b.HasOne("Intelli.DMS.Domain.Model.BatchItemStatus", "BatchItemStatus")
                        .WithMany("BatchItems")
                        .HasForeignKey("BatchItemStatusId")
                        .HasConstraintName("FK_BatchItems_BatchItemStatuses")
                        .IsRequired();

                    b.HasOne("Intelli.DMS.Domain.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Intelli.DMS.Domain.Model.DocumentClass", "DocumentClass")
                        .WithMany("BatchItems")
                        .HasForeignKey("DocumentClassId")
                        .HasConstraintName("FK_BatchItems_DocumentClasses");

                    b.HasOne("Intelli.DMS.Domain.Model.DocumentVersion", "DocumentVersion")
                        .WithMany()
                        .HasForeignKey("DocumentVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Intelli.DMS.Domain.Model.BatchItem", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_BatchItems_BatchItems_PARENT");

                    b.HasOne("Intelli.DMS.Domain.Model.SystemRole", "SystemRole")
                        .WithMany()
                        .HasForeignKey("SystemRoleId");

                    b.Navigation("Batch");

                    b.Navigation("BatchItemStatus");

                    b.Navigation("Company");

                    b.Navigation("DocumentClass");

                    b.Navigation("DocumentVersion");

                    b.Navigation("Parent");

                    b.Navigation("SystemRole");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.BatchItemField", b =>
                {
                    b.HasOne("Intelli.DMS.Domain.Model.BatchItem", "BatchItem")
                        .WithMany("BatchItemFields")
                        .HasForeignKey("BatchItemId")
                        .HasConstraintName("FK_BatchItemFields_BatchItems")
                        .IsRequired();

                    b.HasOne("Intelli.DMS.Domain.Model.BopDictionary", "DictionaryValue")
                        .WithMany("BatchItemFields")
                        .HasForeignKey("DictionaryValueId")
                        .HasConstraintName("FK_BatchItemFields_BopDictionaries");

                    b.HasOne("Intelli.DMS.Domain.Model.DocumentClassField", "DocumentClassField")
                        .WithMany("BatchItemFields")
                        .HasForeignKey("DocumentClassFieldId")
                        .HasConstraintName("FK_BatchItemFields_DocumentClassFields")
                        .IsRequired();

                    b.HasOne("Intelli.DMS.Domain.Model.DocumentVersion", "DocumentVersion")
                        .WithMany()
                        .HasForeignKey("DocumentVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BatchItem");

                    b.Navigation("DictionaryValue");

                    b.Navigation("DocumentClassField");

                    b.Navigation("DocumentVersion");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.BatchItemPage", b =>
                {
                    b.HasOne("Intelli.DMS.Domain.Model.BatchItem", "BatchItem")
                        .WithMany("BatchItemPages")
                        .HasForeignKey("BatchItemId")
                        .HasConstraintName("FK_BatchItemPages_BatchItems")
                        .IsRequired();

                    b.HasOne("Intelli.DMS.Domain.Model.DocumentVersion", "DocumentVersion")
                        .WithMany()
                        .HasForeignKey("DocumentVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BatchItem");

                    b.Navigation("DocumentVersion");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.BatchMetaHistory", b =>
                {
                    b.HasOne("Intelli.DMS.Domain.Model.Batch", "Batch")
                        .WithMany("BatchMetaHistories")
                        .HasForeignKey("BatchId")
                        .HasConstraintName("FK_BatchMetaHistory_Batches")
                        .IsRequired();

                    b.HasOne("Intelli.DMS.Domain.Model.SystemUser", "SystemUser")
                        .WithMany()
                        .HasForeignKey("SystemUserId");

                    b.Navigation("Batch");

                    b.Navigation("SystemUser");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.BatchMetum", b =>
                {
                    b.HasOne("Intelli.DMS.Domain.Model.Batch", "Batch")
                        .WithMany("BatchMeta")
                        .HasForeignKey("BatchId")
                        .HasConstraintName("FK_BatchMeta_Batches")
                        .IsRequired();

                    b.HasOne("Intelli.DMS.Domain.Model.BopDictionary", "DictionaryValue")
                        .WithMany("BatchMeta")
                        .HasForeignKey("DictionaryValueId")
                        .HasConstraintName("FK_BatchMeta_Dictionaries");

                    b.HasOne("Intelli.DMS.Domain.Model.DocumentClassField", "DocumentClassField")
                        .WithMany("BatchMeta")
                        .HasForeignKey("DocumentClassFieldId")
                        .HasConstraintName("FK_BatchMeta_DocumentClassFields")
                        .IsRequired();

                    b.HasOne("Intelli.DMS.Domain.Model.DocumentVersion", "DocumentVersion")
                        .WithMany()
                        .HasForeignKey("DocumentVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("DictionaryValue");

                    b.Navigation("DocumentClassField");

                    b.Navigation("DocumentVersion");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.BatchSourceDocumentsSpecification", b =>
                {
                    b.HasOne("Intelli.DMS.Domain.Model.BatchSource", "BatchSource")
                        .WithMany("BatchSourceDocumentsSpecifications")
                        .HasForeignKey("BatchSourceId")
                        .HasConstraintName("FK_BatchSourceDocumentsSpecifications_BatchSources")
                        .IsRequired();

                    b.HasOne("Intelli.DMS.Domain.Model.DocumentClass", "DocumentClass")
                        .WithMany("BatchSourceDocumentsSpecifications")
                        .HasForeignKey("DocumentClassId")
                        .HasConstraintName("FK_BatchSourceDocumentsSpecifications_DocumentClasses")
                        .IsRequired();

                    b.Navigation("BatchSource");

                    b.Navigation("DocumentClass");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.BopDictionary", b =>
                {
                    b.HasOne("Intelli.DMS.Domain.Model.DictionaryType", "DictionaryType")
                        .WithMany("BopDictionaries")
                        .HasForeignKey("DictionaryTypeId")
                        .HasConstraintName("FK_Dictionaries_DictionaryTypes")
                        .IsRequired();

                    b.Navigation("DictionaryType");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.Client", b =>
                {
                    b.HasOne("Intelli.DMS.Domain.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.ClientTag", b =>
                {
                    b.HasOne("Intelli.DMS.Domain.Model.Client", "Client")
                        .WithMany("ClientTags")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.ColumnPreference", b =>
                {
                    b.HasOne("Intelli.DMS.Domain.Model.Screen", "Screen")
                        .WithMany("ColumnPreferences")
                        .HasForeignKey("ScreenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Intelli.DMS.Domain.Model.SystemUser", "SystemUser")
                        .WithMany("ColumnPreferences")
                        .HasForeignKey("SystemUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Screen");

                    b.Navigation("SystemUser");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.CompanyAbbyTemplate", b =>
                {
                    b.HasOne("Intelli.DMS.Domain.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_CompanyAbbyTemplates_Companies")
                        .IsRequired();

                    b.HasOne("Intelli.DMS.Domain.Model.DocumentClass", "DocumentClass")
                        .WithMany()
                        .HasForeignKey("DocumentClassId")
                        .HasConstraintName("FK_CompanyAbbyTemplates_DocumentClasses")
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("DocumentClass");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.CompanyAbbyTemplateField", b =>
                {
                    b.HasOne("Intelli.DMS.Domain.Model.CompanyFlow", "CompanyFlow")
                        .WithMany()
                        .HasForeignKey("CompanyFlowId")
                        .HasConstraintName("FK__CompanyAb__Compa__3587F3E0");

                    b.Navigation("CompanyFlow");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.DocumentApprovalHistory", b =>
                {
                    b.HasOne("Intelli.DMS.Domain.Model.SystemRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.DocumentClass", b =>
                {
                    b.HasOne("Intelli.DMS.Domain.Model.DocumentType", "DocumentType")
                        .WithMany("DocumentClasses")
                        .HasForeignKey("DocumentTypeId")
                        .HasConstraintName("FK_DocumentClasses_DocumentTypes")
                        .IsRequired();

                    b.Navigation("DocumentType");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.DocumentClassField", b =>
                {
                    b.HasOne("Intelli.DMS.Domain.Model.DictionaryType", "DictionaryType")
                        .WithMany("DocumentClassFields")
                        .HasForeignKey("DictionaryTypeId")
                        .HasConstraintName("FK_DocumentClassFields_DictionaryTypes");

                    b.HasOne("Intelli.DMS.Domain.Model.DocumentClassFieldType", "DocumentClassFieldType")
                        .WithMany("DocumentClassFields")
                        .HasForeignKey("DocumentClassFieldTypeId")
                        .HasConstraintName("FK_DocumentClassFields_DocumentClassFieldTypes")
                        .IsRequired();

                    b.HasOne("Intelli.DMS.Domain.Model.DocumentClass", "DocumentClass")
                        .WithMany("DocumentClassFields")
                        .HasForeignKey("DocumentClassId")
                        .HasConstraintName("FK_DocumentClassFields_DocumentClasses")
                        .IsRequired();

                    b.Navigation("DictionaryType");

                    b.Navigation("DocumentClass");

                    b.Navigation("DocumentClassFieldType");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.DocumentRejectionReasonCompany", b =>
                {
                    b.HasOne("Intelli.DMS.Domain.Model.Company", "Company")
                        .WithMany("DocumentRejectionReasonCompanies")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_DocumentRejectionReasonCompany_Companies")
                        .IsRequired();

                    b.HasOne("Intelli.DMS.Domain.Model.DocumentRejectionReason", "DocumentRejectionReason")
                        .WithMany("DocumentRejectionReasonCompanies")
                        .HasForeignKey("DocumentRejectionReasonId")
                        .HasConstraintName("FK_DocumentRejectionReasonCompany_DocumentRejectionReasons")
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("DocumentRejectionReason");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.DocumentTypeRoles", b =>
                {
                    b.HasOne("Intelli.DMS.Domain.Model.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Intelli.DMS.Domain.Model.SystemRole", "SystemRole")
                        .WithMany()
                        .HasForeignKey("SystemRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentType");

                    b.Navigation("SystemRole");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.DocumentsCheckedOut", b =>
                {
                    b.HasOne("Intelli.DMS.Domain.Model.BatchItem", "BatchItem")
                        .WithMany()
                        .HasForeignKey("BatchItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Intelli.DMS.Domain.Model.SystemUser", "SystemUser")
                        .WithMany()
                        .HasForeignKey("SystemUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BatchItem");

                    b.Navigation("SystemUser");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.DocumentsCheckedOutLog", b =>
                {
                    b.HasOne("Intelli.DMS.Domain.Model.BatchItem", "BatchItem")
                        .WithMany()
                        .HasForeignKey("BatchItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Intelli.DMS.Domain.Model.SystemUser", "SystemUser")
                        .WithMany()
                        .HasForeignKey("SystemUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BatchItem");

                    b.Navigation("SystemUser");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.DocumentsPerCompany", b =>
                {
                    b.HasOne("Intelli.DMS.Domain.Model.Company", "Company")
                        .WithMany("DocumentsPerCompanies")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Intelli.DMS.Domain.Model.DocumentClass", "DocumentClass")
                        .WithMany("DocumentsPerCompanies")
                        .HasForeignKey("DocumentClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("DocumentClass");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.OcrenginesDocumentClass", b =>
                {
                    b.HasOne("Intelli.DMS.Domain.Model.DocumentClass", "DocumentClass")
                        .WithMany("OcrenginesDocumentClasses")
                        .HasForeignKey("DocumentClassId")
                        .HasConstraintName("FK_OCREnginesDocumentClasses_DocumentClasses")
                        .IsRequired();

                    b.HasOne("Intelli.DMS.Domain.Model.Ocrengine", "Ocrengine")
                        .WithMany("OcrenginesDocumentClasses")
                        .HasForeignKey("OcrengineId")
                        .HasConstraintName("FK_OCREnginesDocumentClasses_OCREngines")
                        .IsRequired();

                    b.Navigation("DocumentClass");

                    b.Navigation("Ocrengine");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.PasswordHistory", b =>
                {
                    b.HasOne("Intelli.DMS.Domain.Model.SystemUser", "SystemUser")
                        .WithMany("PasswordHistories")
                        .HasForeignKey("SystemUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SystemUser");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.RoleScreen", b =>
                {
                    b.HasOne("Intelli.DMS.Domain.Model.Screen", "Screen")
                        .WithMany("RoleScreens")
                        .HasForeignKey("ScreenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Intelli.DMS.Domain.Model.SystemRole", "SystemRole")
                        .WithMany("RoleScreens")
                        .HasForeignKey("SystemRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Screen");

                    b.Navigation("SystemRole");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.RoleScreenColumn", b =>
                {
                    b.HasOne("Intelli.DMS.Domain.Model.SystemRole", "Role")
                        .WithMany("RoleScreenColumns")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Intelli.DMS.Domain.Model.ScreenColumn", "ScreenColumn")
                        .WithMany("RoleScreenColumns")
                        .HasForeignKey("ScreenColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("ScreenColumn");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.RoleScreenElement", b =>
                {
                    b.HasOne("Intelli.DMS.Domain.Model.SystemRole", "Role")
                        .WithMany("RoleScreenElements")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Intelli.DMS.Domain.Model.ScreenElement", "ScreenElement")
                        .WithMany("RoleScreenElements")
                        .HasForeignKey("ScreenElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("ScreenElement");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.ScreenColumn", b =>
                {
                    b.HasOne("Intelli.DMS.Domain.Model.Screen", "Screen")
                        .WithMany("ScreenColumns")
                        .HasForeignKey("ScreenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Screen");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.ScreenElement", b =>
                {
                    b.HasOne("Intelli.DMS.Domain.Model.Screen", "Screen")
                        .WithMany("ScreenElements")
                        .HasForeignKey("ScreenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Screen");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.StationVariable", b =>
                {
                    b.HasOne("Intelli.DMS.Domain.Model.Station", "Station")
                        .WithMany("StationVariables")
                        .HasForeignKey("StationId")
                        .HasConstraintName("FK_StationVariables_Stations");

                    b.HasOne("Intelli.DMS.Domain.Model.StationVariableType", "StationVariableType")
                        .WithMany("StationVariables")
                        .HasForeignKey("StationVariableTypeId")
                        .HasConstraintName("FK_StationVariables_StationVariableTypes")
                        .IsRequired();

                    b.Navigation("Station");

                    b.Navigation("StationVariableType");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.SystemRole", b =>
                {
                    b.HasOne("Intelli.DMS.Domain.Model.Company", "Company")
                        .WithMany("SystemRoles")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_SystemRoles_company")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.SystemUserCountry", b =>
                {
                    b.HasOne("Intelli.DMS.Domain.Model.Country", "Country")
                        .WithMany("SystemUserCountries")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Intelli.DMS.Domain.Model.SystemUser", "SystemUser")
                        .WithMany("SystemUserCountries")
                        .HasForeignKey("SystemUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("SystemUser");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.SystemUserRole", b =>
                {
                    b.HasOne("Intelli.DMS.Domain.Model.SystemRole", "SystemRole")
                        .WithMany("SystemUserRoles")
                        .HasForeignKey("SystemRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Intelli.DMS.Domain.Model.SystemUser", "SystemUser")
                        .WithMany("SystemUserRoles")
                        .HasForeignKey("SystemUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SystemRole");

                    b.Navigation("SystemUser");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.UserCompany", b =>
                {
                    b.HasOne("Intelli.DMS.Domain.Model.Company", "Company")
                        .WithMany("UserCompanies")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_Companyies_Companyid")
                        .IsRequired();

                    b.HasOne("Intelli.DMS.Domain.Model.SystemUser", "SystemUser")
                        .WithMany("UserCompanies")
                        .HasForeignKey("SystemUserId")
                        .HasConstraintName("FK_SystemUserId")
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("SystemUser");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.UserPreference", b =>
                {
                    b.HasOne("Intelli.DMS.Domain.Model.SystemUser", "SystemUser")
                        .WithMany("UserPreferences")
                        .HasForeignKey("SystemUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SystemUser");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.UserSession", b =>
                {
                    b.HasOne("Intelli.DMS.Domain.Model.SystemUser", "SystemUser")
                        .WithOne("UserSession")
                        .HasForeignKey("Intelli.DMS.Domain.Model.UserSession", "SystemUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SystemUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Intelli.DMS.Domain.Model.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Intelli.DMS.Domain.Model.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Intelli.DMS.Domain.Model.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Intelli.DMS.Domain.Model.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.Views.BatchesDataTobeDeleted", b =>
                {
                    b.HasOne("Intelli.DMS.Domain.Model.Views.ClientsDataToBeDeleted", null)
                        .WithOne()
                        .HasForeignKey("Intelli.DMS.Domain.Model.Views.BatchesDataTobeDeleted", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.Batch", b =>
                {
                    b.Navigation("BatchItems");

                    b.Navigation("BatchMeta");

                    b.Navigation("BatchMetaHistories");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.BatchItem", b =>
                {
                    b.Navigation("BatchItemFields");

                    b.Navigation("BatchItemPages");

                    b.Navigation("InverseParent");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.BatchItemStatus", b =>
                {
                    b.Navigation("BatchItems");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.BatchSource", b =>
                {
                    b.Navigation("Batches");

                    b.Navigation("BatchSourceDocumentsSpecifications");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.BatchStatus", b =>
                {
                    b.Navigation("Batches");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.BopDictionary", b =>
                {
                    b.Navigation("BatchItemFields");

                    b.Navigation("BatchMeta");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.Bu", b =>
                {
                    b.Navigation("Batches");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.Client", b =>
                {
                    b.Navigation("Batches");

                    b.Navigation("ClientTags");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.Company", b =>
                {
                    b.Navigation("AdvancedSignatureCallHistories");

                    b.Navigation("Batches");

                    b.Navigation("DocumentRejectionReasonCompanies");

                    b.Navigation("DocumentsPerCompanies");

                    b.Navigation("SystemRoles");

                    b.Navigation("UserCompanies");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.Country", b =>
                {
                    b.Navigation("SystemUserCountries");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.DictionaryType", b =>
                {
                    b.Navigation("BopDictionaries");

                    b.Navigation("DocumentClassFields");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.DocumentClass", b =>
                {
                    b.Navigation("BatchItems");

                    b.Navigation("BatchSourceDocumentsSpecifications");

                    b.Navigation("DocumentClassFields");

                    b.Navigation("DocumentsPerCompanies");

                    b.Navigation("OcrenginesDocumentClasses");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.DocumentClassField", b =>
                {
                    b.Navigation("BatchItemFields");

                    b.Navigation("BatchMeta");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.DocumentClassFieldType", b =>
                {
                    b.Navigation("DocumentClassFields");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.DocumentRejectionReason", b =>
                {
                    b.Navigation("DocumentRejectionReasonCompanies");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.DocumentType", b =>
                {
                    b.Navigation("DocumentClasses");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.Ocrengine", b =>
                {
                    b.Navigation("OcrenginesDocumentClasses");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.Screen", b =>
                {
                    b.Navigation("ColumnPreferences");

                    b.Navigation("RoleScreens");

                    b.Navigation("ScreenColumns");

                    b.Navigation("ScreenElements");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.ScreenColumn", b =>
                {
                    b.Navigation("RoleScreenColumns");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.ScreenElement", b =>
                {
                    b.Navigation("RoleScreenElements");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.Station", b =>
                {
                    b.Navigation("StationVariables");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.StationVariableType", b =>
                {
                    b.Navigation("StationVariables");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.SystemRole", b =>
                {
                    b.Navigation("RoleScreenColumns");

                    b.Navigation("RoleScreenElements");

                    b.Navigation("RoleScreens");

                    b.Navigation("SystemUserRoles");
                });

            modelBuilder.Entity("Intelli.DMS.Domain.Model.SystemUser", b =>
                {
                    b.Navigation("AspNetUsers");

                    b.Navigation("ColumnPreferences");

                    b.Navigation("PasswordHistories");

                    b.Navigation("SystemUserCountries");

                    b.Navigation("SystemUserRoles");

                    b.Navigation("UserCompanies");

                    b.Navigation("UserPreferences");

                    b.Navigation("UserSession");
                });
#pragma warning restore 612, 618
        }
    }
}
